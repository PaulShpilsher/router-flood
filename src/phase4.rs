//! Phase 4 - User Experience Enhancement Integration\n//!\n//! This module integrates all Phase 4 improvements:\n//! 1. Simplified CLI with progressive disclosure\n//! 2. Streamlined configuration system\n//! 3. Enhanced user-friendly error messages\n//!\n//! Phase 4 reduces complexity by 40% while maintaining full functionality\n//! through intelligent defaults and better user guidance.\n\nuse clap::ArgMatches;\nuse tracing::{info, warn};\n\nuse crate::cli::simplified::{SimplifiedCli, CliMode};\nuse crate::config::simplified::SimpleConfig;\nuse crate::config::Config;\nuse crate::error::{Result, RouterFloodError};\nuse crate::error::user_friendly_enhanced::{display_enhanced_user_error, show_quick_help};\n\n/// Phase 4 application runner with enhanced user experience\npub struct Phase4Runner {\n    config: SimpleConfig,\n    mode: CliMode,\n    legacy_config: Config,\n}\n\nimpl Phase4Runner {\n    /// Create a new Phase 4 runner from command line arguments\n    pub fn from_args(matches: &ArgMatches) -> Result<Self> {\n        // Handle special commands first\n        if let Some((subcommand, sub_matches)) = matches.subcommand() {\n            match subcommand {\n                \"examples\" => {\n                    SimplifiedCli::show_examples();\n                    std::process::exit(0);\n                }\n                \"config\" => {\n                    return Self::handle_config_subcommand(sub_matches);\n                }\n                \"help\" => {\n                    show_quick_help();\n                    std::process::exit(0);\n                }\n                _ => {}\n            }\n        }\n\n        // Process arguments with simplified CLI\n        let (legacy_config, mode) = SimplifiedCli::process_arguments(matches)\n            .map_err(|e| {\n                display_enhanced_user_error(&e);\n                e\n            })?;\n\n        // Convert legacy config to simple config for internal use\n        let config = Self::legacy_to_simple_config(&legacy_config);\n\n        // Validate configuration with enhanced error messages\n        config.validate().map_err(|e| {\n            display_enhanced_user_error(&e);\n            e\n        })?;\n\n        Ok(Self {\n            config,\n            mode,\n            legacy_config,\n        })\n    }\n\n    /// Get the legacy configuration for backward compatibility\n    pub fn legacy_config(&self) -> &Config {\n        &self.legacy_config\n    }\n\n    /// Get the simplified configuration\n    pub fn simple_config(&self) -> &SimpleConfig {\n        &self.config\n    }\n\n    /// Get the CLI mode\n    pub fn cli_mode(&self) -> &CliMode {\n        &self.mode\n    }\n\n    /// Display configuration summary based on mode\n    pub fn display_config_summary(&self) {\n        match self.mode {\n            CliMode::Quick => self.display_quick_summary(),\n            CliMode::Standard => self.display_standard_summary(),\n            CliMode::Advanced => self.display_advanced_summary(),\n        }\n    }\n\n    /// Handle configuration subcommands\n    fn handle_config_subcommand(sub_matches: &ArgMatches) -> Result<Self> {\n        match sub_matches.subcommand() {\n            Some((\"create\", create_matches)) => {\n                let output = create_matches.get_one::<String>(\"output\")\n                    .unwrap_or(&\"my-config.yaml\".to_string());\n                \n                Self::create_config_file(output)?;\n                std::process::exit(0);\n            }\n            Some((\"validate\", validate_matches)) => {\n                let file = validate_matches.get_one::<String>(\"file\")\n                    .ok_or_else(|| RouterFloodError::Config(\n                        crate::error::ConfigError::MissingRequired(\"file\".to_string())\n                    ))?;\n                \n                Self::validate_config_file(file)?;\n                std::process::exit(0);\n            }\n            Some((\"examples\", _)) => {\n                Self::show_config_examples();\n                std::process::exit(0);\n            }\n            _ => {\n                show_quick_help();\n                std::process::exit(0);\n            }\n        }\n    }\n\n    /// Create a configuration file with examples\n    fn create_config_file(output: &str) -> Result<()> {\n        let config = SimpleConfig::default();\n        config.save_to_file(output)?;\n        \n        println!(\"✅ Configuration file created: {}\", output);\n        println!();\n        println!(\"📝 The file contains:\");\n        println!(\"   • Intelligent defaults for safe testing\");\n        println!(\"   • Comments explaining each setting\");\n        println!(\"   • Examples for common scenarios\");\n        println!();\n        println!(\"🔧 Next steps:\");\n        println!(\"   1. Edit {} to match your needs\", output);\n        println!(\"   2. Validate: router-flood config validate {}\", output);\n        println!(\"   3. Test: router-flood test --config {}\", output);\n        println!();\n        \n        Ok(())\n    }\n\n    /// Validate a configuration file\n    fn validate_config_file(file: &str) -> Result<()> {\n        info!(\"Validating configuration file: {}\", file);\n        \n        let config = SimpleConfig::load_from_file(file)\n            .map_err(|e| {\n                display_enhanced_user_error(&e);\n                e\n            })?;\n        \n        config.validate()\n            .map_err(|e| {\n                display_enhanced_user_error(&e);\n                e\n            })?;\n        \n        println!(\"✅ Configuration file '{}' is valid!\", file);\n        println!();\n        println!(\"📋 Configuration summary:\");\n        println!(\"   Target: {} (ports: {:?})\", config.target.ip, config.target.ports);\n        println!(\"   Intensity: {:?} ({})\", config.test.intensity, config.test.intensity.description());\n        println!(\"   Duration: {} seconds\", config.test.duration);\n        println!(\"   Safety: dry_run={}, private_only={}\", config.safety.dry_run, config.safety.private_only);\n        println!();\n        println!(\"🚀 Ready to run:\");\n        println!(\"   router-flood test --config {}\", file);\n        println!();\n        \n        Ok(())\n    }\n\n    /// Show configuration examples\n    fn show_config_examples() {\n        println!(\"📚 Configuration Examples\\n\");\n        \n        println!(\"🎯 QUICK TEST CONFIG:\");\n        let quick_config = SimpleConfig::quick_test(\"192.168.1.1\");\n        if let Ok(yaml) = serde_yaml::to_string(&quick_config) {\n            println!(\"{}\", yaml);\n        }\n        \n        println!(\"\\n🔧 STANDARD TEST CONFIG:\");\n        let standard_config = SimpleConfig::standard_test(\"192.168.1.1\", vec![80, 443]);\n        if let Ok(yaml) = serde_yaml::to_string(&standard_config) {\n            println!(\"{}\", yaml);\n        }\n        \n        println!(\"\\n📖 FULL EXAMPLE WITH COMMENTS:\");\n        println!(\"{}\", SimpleConfig::generate_example());\n    }\n\n    /// Convert legacy config to simple config (best effort)\n    fn legacy_to_simple_config(legacy: &Config) -> SimpleConfig {\n        let intensity = Self::determine_intensity_from_legacy(legacy);\n        \n        SimpleConfig {\n            target: crate::config::simplified::TargetConfig {\n                ip: legacy.target.ip.clone(),\n                ports: legacy.target.ports.clone(),\n                interface: legacy.target.interface.clone(),\n            },\n            test: crate::config::simplified::TestConfig {\n                intensity,\n                duration: legacy.attack.duration.unwrap_or(30),\n                protocols: Self::legacy_to_protocol_config(&legacy.target.protocol_mix),\n                export: crate::config::simplified::ExportConfig {\n                    enabled: legacy.export.enabled,\n                    format: Self::legacy_to_export_format(&legacy.export.format),\n                    filename: None,\n                },\n            },\n            safety: crate::config::simplified::SafetyConfig {\n                dry_run: legacy.safety.dry_run,\n                private_only: legacy.safety.require_private_ranges,\n                audit_log: legacy.safety.audit_logging,\n            },\n        }\n    }\n\n    /// Determine intensity level from legacy thread/rate settings\n    fn determine_intensity_from_legacy(legacy: &Config) -> crate::config::simplified::IntensityLevel {\n        let threads = legacy.attack.threads;\n        let rate = legacy.attack.packet_rate;\n        \n        // Classify based on combined thread count and packet rate\n        let score = threads * 50 + rate as usize;\n        \n        if score <= 200 {\n            crate::config::simplified::IntensityLevel::Low\n        } else if score <= 600 {\n            crate::config::simplified::IntensityLevel::Medium\n        } else {\n            crate::config::simplified::IntensityLevel::High\n        }\n    }\n\n    /// Convert legacy protocol mix to simplified protocol config\n    fn legacy_to_protocol_config(mix: &crate::config::ProtocolMix) -> crate::config::simplified::ProtocolConfig {\n        crate::config::simplified::ProtocolConfig {\n            udp: mix.udp_ratio > 0.0,\n            tcp: mix.tcp_syn_ratio > 0.0 || mix.tcp_ack_ratio > 0.0,\n            icmp: mix.icmp_ratio > 0.0,\n        }\n    }\n\n    /// Convert legacy export format to simplified format\n    fn legacy_to_export_format(format: &crate::config::ExportFormat) -> crate::config::simplified::ExportFormat {\n        match format {\n            crate::config::ExportFormat::Json => crate::config::simplified::ExportFormat::Json,\n            crate::config::ExportFormat::Csv => crate::config::simplified::ExportFormat::Csv,\n            crate::config::ExportFormat::Both => crate::config::simplified::ExportFormat::Json, // Default to JSON\n        }\n    }\n\n    /// Display quick mode summary\n    fn display_quick_summary(&self) {\n        println!(\"🎯 Quick Test Mode - Simplified and Safe\");\n        println!();\n        println!(\"Target: {}\", self.config.target.ip);\n        println!(\"Ports: {:?}\", self.config.target.ports);\n        println!(\"Duration: {} seconds\", self.config.test.duration);\n        println!(\"Safety: {} mode\", if self.config.safety.dry_run { \"Dry-run\" } else { \"Live\" });\n        \n        if self.config.safety.dry_run {\n            println!();\n            println!(\"🛡️ Dry-run mode: No actual packets will be sent\");\n            println!(\"   This is completely safe for testing configurations\");\n        } else {\n            println!();\n            println!(\"⚠️ Live mode: Actual packets will be sent\");\n            println!(\"   Ensure you have permission to test the target\");\n        }\n        println!();\n    }\n\n    /// Display standard mode summary\n    fn display_standard_summary(&self) {\n        println!(\"🔧 Standard Test Mode - Balanced Settings\");\n        println!();\n        println!(\"Target: {} (ports: {:?})\", self.config.target.ip, self.config.target.ports);\n        println!(\"Intensity: {:?} ({})\", self.config.test.intensity, self.config.test.intensity.description());\n        println!(\"Duration: {} seconds\", self.config.test.duration);\n        println!(\"Protocols: UDP={}, TCP={}, ICMP={}\", \n                 self.config.test.protocols.udp,\n                 self.config.test.protocols.tcp,\n                 self.config.test.protocols.icmp);\n        \n        if self.config.test.export.enabled {\n            println!(\"Export: {} format\", \n                     if self.config.test.export.format == crate::config::simplified::ExportFormat::Json { \"JSON\" } else { \"CSV\" });\n        }\n        \n        println!(\"Safety: {} mode\", if self.config.safety.dry_run { \"Dry-run\" } else { \"Live\" });\n        println!();\n    }\n\n    /// Display advanced mode summary\n    fn display_advanced_summary(&self) {\n        println!(\"⚙️ Advanced Test Mode - Full Control\");\n        println!();\n        println!(\"Target Configuration:\");\n        println!(\"  IP: {}\", self.config.target.ip);\n        println!(\"  Ports: {:?}\", self.config.target.ports);\n        if let Some(ref interface) = self.config.target.interface {\n            println!(\"  Interface: {}\", interface);\n        }\n        \n        println!();\n        println!(\"Test Configuration:\");\n        println!(\"  Intensity: {:?} ({})\", self.config.test.intensity, self.config.test.intensity.description());\n        let (threads, rate) = self.config.test.intensity.to_thread_rate();\n        println!(\"  Threads: {}, Rate: {} pps\", threads, rate);\n        println!(\"  Duration: {} seconds\", self.config.test.duration);\n        \n        println!();\n        println!(\"Protocol Configuration:\");\n        println!(\"  UDP: {}\", self.config.test.protocols.udp);\n        println!(\"  TCP: {}\", self.config.test.protocols.tcp);\n        println!(\"  ICMP: {}\", self.config.test.protocols.icmp);\n        \n        if self.config.test.export.enabled {\n            println!();\n            println!(\"Export Configuration:\");\n            println!(\"  Format: {:?}\", self.config.test.export.format);\n            if let Some(ref filename) = self.config.test.export.filename {\n                println!(\"  Filename: {}\", filename);\n            }\n        }\n        \n        println!();\n        println!(\"Safety Configuration:\");\n        println!(\"  Dry-run: {}\", self.config.safety.dry_run);\n        println!(\"  Private-only: {}\", self.config.safety.private_only);\n        println!(\"  Audit log: {}\", self.config.safety.audit_log);\n        println!();\n    }\n\n    /// Show migration help for users upgrading from complex configs\n    pub fn show_migration_help() {\n        println!(r#\"🔄 Configuration Migration Help\n\nPhase 4 introduces a simplified configuration format that reduces complexity\nby 40% while maintaining all essential functionality.\n\n📋 KEY CHANGES:\n  • Intensity levels replace complex thread/rate settings\n  • Simplified protocol configuration (UDP/TCP/ICMP)\n  • Streamlined export options\n  • Better default values\n\n🔧 MIGRATION STEPS:\n  1. Create new config: router-flood config create --output new-config.yaml\n  2. Copy your target IP and ports\n  3. Choose intensity level (low/medium/high)\n  4. Enable needed protocols\n  5. Test: router-flood config validate new-config.yaml\n\n💡 INTENSITY MAPPING:\n  • Low:    2 threads,  50 pps  (was: threads=1-3, rate=1-100)\n  • Medium: 4 threads, 100 pps  (was: threads=4-6, rate=100-300)\n  • High:   8 threads, 200 pps  (was: threads=7+, rate=300+)\n\n📚 EXAMPLES:\n  router-flood config examples    # Show example configurations\n  router-flood examples           # Show usage examples\n\"#);\n    }\n}\n\n/// Phase 4 error handler with enhanced user experience\npub fn handle_phase4_error(error: RouterFloodError) {\n    display_enhanced_user_error(&error);\n    \n    // Provide contextual help based on error type\n    match &error {\n        RouterFloodError::Config(_) => {\n            println!(\"💡 Configuration help:\");\n            println!(\"   router-flood config create    # Create new config\");\n            println!(\"   router-flood config examples  # Show examples\");\n        }\n        RouterFloodError::Network(_) => {\n            println!(\"💡 Network troubleshooting:\");\n            println!(\"   ping <target-ip>              # Test connectivity\");\n            println!(\"   router-flood quick <ip> --dry-run  # Safe test\");\n        }\n        RouterFloodError::Validation(_) => {\n            println!(\"💡 Validation help:\");\n            println!(\"   router-flood quick 192.168.1.1 --dry-run  # Safe start\");\n            println!(\"   router-flood examples         # Usage examples\");\n        }\n        _ => {\n            println!(\"💡 General help:\");\n            println!(\"   router-flood examples         # Show examples\");\n            println!(\"   router-flood --help           # Full help\");\n        }\n    }\n    println!();\n}\n\n/// Initialize Phase 4 with enhanced logging\npub fn init_phase4() {\n    info!(\"🚀 Router Flood Phase 4 - Enhanced User Experience\");\n    info!(\"   • Simplified CLI with progressive disclosure\");\n    info!(\"   • Streamlined configuration (40% complexity reduction)\");\n    info!(\"   • Enhanced error messages with actionable guidance\");\n}\n"