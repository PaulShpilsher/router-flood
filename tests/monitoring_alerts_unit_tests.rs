//! Unit tests for monitoring alerts module\n//!\n//! These tests were moved from src/monitoring/alerts.rs to maintain\n//! separation between implementation and test code.\n\nuse router_flood::monitoring::alerts::*;\nuse router_flood::monitoring::metrics::{MetricsCollector, MetricType};\nuse std::collections::HashMap;\nuse std::sync::Arc;\n\n#[test]\nfn test_alert_manager() {\n    let collector = Arc::new(MetricsCollector::new());\n    let alert_manager = Alerts::new(collector.clone());\n    \n    // Add a test rule\n    let rule = AlertRule {\n        name: \"test_rule\",\n        metric_name: \"test_metric\",\n        condition: AlertCondition::GreaterThan,\n        threshold: 50.0,\n        level: AlertLevel::Warning,\n        message_template: \"Test alert: {value}\",\n        enabled: true,\n    };\n    \n    alert_manager.add_rule(rule);\n    \n    // Register and update metric\n    let metric = collector.register_metric(\n        \"test_metric\",\n        MetricType::Gauge,\n        \"Test metric\",\n    );\n    \n    metric.update(60.0, HashMap::new());\n    \n    // Check alerts\n    let alerts = alert_manager.check_alerts();\n    assert_eq!(alerts.len(), 1);\n    assert!(alerts[0].message.contains(\"60\"));\n}\n\n#[test]\nfn test_default_rules() {\n    let rules = create_default_alert_rules();\n    assert!(!rules.is_empty());\n    \n    // Check that all rules have required fields\n    for rule in rules {\n        assert!(!rule.name.is_empty());\n        assert!(!rule.metric_name.is_empty());\n        assert!(!rule.message_template.is_empty());\n    }\n}\n"