//! Unit tests for monitoring metrics module\n//!\n//! These tests were moved from src/monitoring/metrics.rs to maintain\n//! separation between implementation and test code.\n\nuse router_flood::monitoring::metrics::*;\nuse std::collections::HashMap;\nuse std::thread;\nuse std::time::Duration;\n\n#[test]\nfn test_metrics_collector() {\n    let collector = MetricsCollector::new();\n    \n    let counter = collector.register_metric(\n        \"test_counter\".to_string(),\n        MetricType::Counter,\n        \"Test counter\".to_string(),\n    );\n    \n    // Update metric\n    counter.update(5.0, HashMap::new());\n    assert_eq!(counter.current_value(), 5.0);\n    \n    // Increment counter\n    collector.increment_counter(\"test_counter\", HashMap::new());\n    assert_eq!(counter.current_value(), 6.0);\n    \n    // Test summary\n    let summary = collector.get_summary();\n    assert_eq!(summary.total_metrics, 1);\n    assert_eq!(summary.counters.get(\"test_counter\"), Some(&6.0));\n}\n\n#[test]\nfn test_metric_history() {\n    let metric = Metric::new(\n        \"test_metric\".to_string(),\n        MetricType::Gauge,\n        \"Test metric\".to_string(),\n    );\n    \n    // Add some values\n    metric.update(1.0, HashMap::new());\n    thread::sleep(Duration::from_millis(10));\n    metric.update(2.0, HashMap::new());\n    thread::sleep(Duration::from_millis(10));\n    metric.update(3.0, HashMap::new());\n    \n    // Check history\n    let history = metric.recent_history(Duration::from_secs(1));\n    assert_eq!(history.len(), 3);\n    assert_eq!(history[2].value, 3.0);\n}\n\n#[test]\nfn test_router_flood_metrics() {\n    let collector = MetricsCollector::new();\n    let metrics = RouterFloodMetrics::new(&collector);\n    \n    // Test updating metrics\n    metrics.packets_sent.update(100.0, HashMap::new());\n    metrics.cpu_usage.update(45.5, HashMap::new());\n    \n    let summary = collector.get_summary();\n    assert_eq!(summary.counters.get(\"packets_sent_total\"), Some(&100.0));\n    assert_eq!(summary.gauges.get(\"cpu_usage_percent\"), Some(&45.5));\n}\n"