//! Unit tests for monitoring export module\n//!\n//! These tests were moved from src/monitoring/export.rs to maintain\n//! separation between implementation and test code.\n\nuse router_flood::monitoring::export::*;\nuse router_flood::monitoring::metrics::*;\nuse std::collections::HashMap;\nuse std::sync::Arc;\nuse tempfile::TempDir;\n\n#[tokio::test]\nasync fn test_metrics_exporter() {\n    let temp_dir = TempDir::new().unwrap();\n    let collector = Arc::new(MetricsCollector::new());\n    \n    let config = Export {\n        enabled: true,\n        format: ExportFormat::Json,\n        output_path: temp_dir.path().to_string_lossy(),\n        filename_pattern: \"test_metrics\",\n        include_history: false,\n        compression: false,\n        custom_fields: HashMap::new(),\n    };\n    \n    let exporter = MetricsExporter::new(collector.clone(), config);\n    \n    // Add some test metrics\n    let metric = collector.register_metric(\n        \"test_counter\",\n        MetricType::Counter,\n        \"Test counter\",\n    );\n    metric.update(42.0, HashMap::new());\n    \n    // Export metrics\n    let result = exporter.export_metrics().await;\n    assert!(result.is_ok());\n    \n    let filepath = result.unwrap();\n    assert!(tokio::fs::metadata(&filepath).await.is_ok());\n}\n\n#[tokio::test]\nasync fn test_export_formats() {\n    let temp_dir = TempDir::new().unwrap();\n    let collector = Arc::new(MetricsCollector::new());\n    \n    let formats = vec![\n        ExportFormat::Json,\n        ExportFormat::Csv,\n        ExportFormat::Prometheus,\n        ExportFormat::InfluxDB,\n    ];\n    \n    for format in formats {\n        let config = Export {\n            enabled: true,\n            format: format.clone(),\n            output_path: temp_dir.path().to_string_lossy(),\n            filename_pattern: format!(\"test_{:?}\", format),\n            include_history: false,\n            compression: false,\n            custom_fields: HashMap::new(),\n        };\n        \n        let exporter = MetricsExporter::new(collector.clone(), config);\n        let result = exporter.export_metrics().await;\n        assert!(result.is_ok(), \"Failed to export format: {:?}\", format);\n    }\n}\n"