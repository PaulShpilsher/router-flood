//! Tests for simplified configuration system moved from inline tests\n\nuse router_flood::config::simplified::*;\n\n#[test]\nfn test_default_config_is_valid() {\n    let config = SimpleConfig::default();\n    assert!(config.validate().is_ok());\n}\n\n#[test]\nfn test_quick_test_config() {\n    let config = SimpleConfig::quick_test(\"192.168.1.1\");\n    assert!(config.validate().is_ok());\n    assert_eq!(config.test.intensity, IntensityLevel::Low);\n    assert!(config.safety.dry_run);\n}\n\n#[test]\nfn test_standard_test_config() {\n    let config = SimpleConfig::standard_test(\"192.168.1.1\", vec![80, 443]);\n    assert!(config.validate().is_ok());\n    assert_eq!(config.test.intensity, IntensityLevel::Medium);\n    assert_eq!(config.target.ports, vec![80, 443]);\n}\n\n#[test]\nfn test_intensity_level_conversion() {\n    assert_eq!(IntensityLevel::Low.to_thread_rate(), (2, 50));\n    assert_eq!(IntensityLevel::Medium.to_thread_rate(), (4, 100));\n    assert_eq!(IntensityLevel::High.to_thread_rate(), (8, 200));\n}\n\n#[test]\nfn test_protocol_mix_conversion() {\n    let protocols = ProtocolConfig {\n        udp: true,\n        tcp: true,\n        icmp: false,\n    };\n    \n    let mix = protocols.to_protocol_mix();\n    assert!(mix.udp_ratio > 0.0);\n    assert!(mix.tcp_syn_ratio > 0.0);\n    assert_eq!(mix.icmp_ratio, 0.0);\n}\n\n#[test]\nfn test_validation_errors() {\n    let mut config = SimpleConfig::default();\n    \n    // Test empty IP\n    config.target.ip = \"\".to_string();\n    assert!(config.validate().is_err());\n    \n    // Test invalid duration\n    config.target.ip = \"192.168.1.1\".to_string();\n    config.test.duration = 0;\n    assert!(config.validate().is_err());\n    \n    // Test no protocols enabled\n    config.test.duration = 30;\n    config.test.protocols = ProtocolConfig {\n        udp: false,\n        tcp: false,\n        icmp: false,\n    };\n    assert!(config.validate().is_err());\n}\n"