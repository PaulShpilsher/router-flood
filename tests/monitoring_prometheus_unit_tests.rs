//! Unit tests for monitoring prometheus module\n//!\n//! These tests were moved from src/monitoring/prometheus.rs to maintain\n//! separation between implementation and test code.\n\nuse router_flood::monitoring::prometheus::*;\nuse router_flood::stats::SessionStats;\nuse std::collections::HashMap;\n\nfn create_test_session_stats() -> SessionStats {\n    let mut protocol_breakdown = HashMap::new();\n    protocol_breakdown.insert(\"UDP\", 1000);\n    protocol_breakdown.insert(\"TCP\", 500);\n    protocol_breakdown.insert(\"ICMP\", 100);\n\n    SessionStats {\n        session_id: \"test-session\",\n        timestamp: chrono::Utc::now(),\n        packets_sent: 1600,\n        packets_failed: 10,\n        bytes_sent: 160000,\n        duration_secs: 60.0,\n        packets_per_second: 26.67,\n        megabits_per_second: 0.213,\n        protocol_breakdown,\n        system_stats: None,\n    }\n}\n\nfn create_test_system_stats() -> router_flood::stats::collector::SystemStats {\n    router_flood::stats::collector::SystemStats {\n        cpu_usage: 25.5,\n        memory_usage: 1024 * 1024 * 512, // 512 MB\n        memory_total: 1024 * 1024 * 1024 * 8, // 8 GB\n        network_sent: 160000,\n        network_received: 5000,\n    }\n}\n\n#[test]\nfn test_prometheus_exporter_creation() {\n    let exporter = PrometheusExporter::new(\"router_flood\")\n        .with_label(\"instance\", \"test\")\n        .with_label(\"version\", \"1.0.0\");\n\n    assert_eq!(exporter.namespace, \"router_flood\");\n    assert_eq!(exporter.labels.len(), 2);\n}\n\n#[test]\nfn test_session_stats_export() {\n    let exporter = PrometheusExporter::new(\"router_flood\");\n    let stats = create_test_session_stats();\n    \n    let result = exporter.export_session_stats(&stats);\n    assert!(result.is_ok());\n    \n    let metrics = result.unwrap();\n    assert!(metrics.contains(\"router_flood_packets_sent_total\"));\n    assert!(metrics.contains(\"router_flood_packets_failed_total\"));\n    assert!(metrics.contains(\"router_flood_bytes_sent_total\"));\n    assert!(metrics.contains(\"router_flood_duration_seconds\"));\n    assert!(metrics.contains(\"router_flood_packets_per_second\"));\n    assert!(metrics.contains(\"router_flood_megabits_per_second\"));\n    assert!(metrics.contains(\"router_flood_success_rate_percent\"));\n    assert!(metrics.contains(\"router_flood_packets_by_protocol_total\"));\n}\n\n#[test]\nfn test_system_stats_export() {\n    let exporter = PrometheusExporter::new(\"router_flood\");\n    let stats = create_test_system_stats();\n    \n    let result = exporter.export_system_stats(&stats);\n    assert!(result.is_ok());\n    \n    let metrics = result.unwrap();\n    assert!(metrics.contains(\"router_flood_cpu_usage_percent\"));\n    assert!(metrics.contains(\"router_flood_memory_usage_bytes\"));\n    assert!(metrics.contains(\"router_flood_memory_total_bytes\"));\n}\n\n#[test]\nfn test_combined_metrics_export() {\n    let exporter = PrometheusExporter::new(\"router_flood\")\n        .with_label(\"test\", \"true\");\n    let session_stats = create_test_session_stats();\n    let system_stats = create_test_system_stats();\n    \n    let result = exporter.export_combined_metrics(&session_stats, Some(&system_stats));\n    assert!(result.is_ok());\n    \n    let metrics = result.unwrap();\n    // Should contain both session and system metrics\n    assert!(metrics.contains(\"router_flood_packets_sent_total\"));\n    assert!(metrics.contains(\"router_flood_cpu_usage_percent\"));\n    assert!(metrics.contains(\"test=\\\"true\\\"\"));\n}\n\n#[test]\nfn test_protocol_breakdown_metrics() {\n    let exporter = PrometheusExporter::new(\"test\");\n    let stats = create_test_session_stats();\n    \n    let metrics = exporter.export_session_stats(&stats).unwrap();\n    \n    // Should contain protocol-specific metrics\n    assert!(metrics.contains(\"protocol=\\\"UDP\\\"\"));\n    assert!(metrics.contains(\"protocol=\\\"TCP\\\"\"));\n    assert!(metrics.contains(\"protocol=\\\"ICMP\\\"\"));\n}\n\n#[tokio::test]\nasync fn test_save_to_file() {\n    let exporter = PrometheusExporter::new(\"test\");\n    let session_stats = create_test_session_stats();\n    let system_stats = create_test_system_stats();\n    \n    let temp_file = \"/tmp/test_metrics.txt\";\n    let result = exporter.save_to_file(&session_stats, Some(&system_stats), temp_file).await;\n    \n    assert!(result.is_ok());\n    \n    // Verify file was created and contains metrics\n    let content = tokio::fs::read_to_string(temp_file).await.unwrap();\n    assert!(content.contains(\"test_packets_sent_total\"));\n    assert!(content.contains(\"test_cpu_usage_percent\"));\n    \n    // Clean up\n    let _ = tokio::fs::remove_file(temp_file).await;\n}\n"