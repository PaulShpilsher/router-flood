//! Unit tests for error user friendly module\n//!\n//! These tests were moved from src/error/user_friendly.rs to maintain\n//! separation between implementation and test code.\n\nuse router_flood::error::user_friendly::*;\nuse router_flood::error::*;\n\n#[test]\nfn test_user_friendly_ip_error() {\n    let error = RouterFloodError::Validation(ValidationError::InvalidIpRange {\n        ip: \"8.8.8.8\".to_string(),\n        reason: \"Public IP not allowed\".to_string(),\n    });\n    \n    let friendly = UserFriendlyError::new(&error);\n    let output = format!(\"{}\", friendly);\n    \n    assert!(output.contains(\"❌ Invalid target IP address\"));\n    assert!(output.contains(\"💡 Suggestions\"));\n    assert!(output.contains(\"192.168.1.1\"));\n}\n\n#[test]\nfn test_user_friendly_limit_error() {\n    let error = RouterFloodError::Validation(ValidationError::ExceedsLimit {\n        field: \"threads\".to_string(),\n        value: 200,\n        limit: 100,\n    });\n    \n    let friendly = UserFriendlyError::new(&error);\n    let output = format!(\"{}\", friendly);\n    \n    assert!(output.contains(\"❌ Configuration limit exceeded\"));\n    assert!(output.contains(\"threads\"));\n    assert!(output.contains(\"4-8 threads\"));\n}\n"